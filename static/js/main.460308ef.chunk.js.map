{"version":3,"sources":["IMG_3041.JPG","components/countdown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Countdown","props","state","days","hours","min","sec","this","interval","setInterval","date","calculateCountdown","setState","stop","endDate","diff","Date","parse","timeLeft","years","minutes","seconds","Math","floor","clearInterval","value","String","length","countDown","className","Component","App","src","image","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,sC,iNCoG5BC,E,YAjGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,IAAK,GANU,E,iFASE,IAAD,OAClBC,KAAKC,SAAWC,aAAY,WAC1B,IAAMC,EAAO,EAAKC,mBAAmB,EAAKV,MAAMS,MAChDA,EAAO,EAAKE,SAASF,GAAQ,EAAKG,SACjC,O,6CAIHN,KAAKM,S,yCAGYC,GACjB,IAAIC,GAAQC,KAAKC,MAAM,IAAID,KAAKF,IAAYE,KAAKC,MAAM,IAAID,OAAW,IAEtE,GAAID,GAAQ,EAAG,OAAO,EAEtB,IAAMG,EAAW,CACfC,MAAO,EACPhB,KAAM,EACNC,MAAO,EACPgB,QAAS,EACTC,QAAS,GA2BX,OAxBIN,GAAQ,WACVG,EAASC,MAAQG,KAAKC,MAAMR,EAAI,UAChCA,GAAyB,OAAjBG,EAASC,MAAiB,OAGhCJ,GAAQ,QAEVG,EAASf,KAAOmB,KAAKC,MAAMR,EAAO,OAClCA,GAAwB,MAAhBG,EAASf,MAGfY,GAAQ,OAEVG,EAASd,MAAQkB,KAAKC,MAAMR,EAAO,MACnCA,GAAyB,KAAjBG,EAASd,OAGfW,GAAQ,KACVG,EAASb,IAAMiB,KAAKC,MAAMR,EAAO,IACjCA,GAAuB,GAAfG,EAASb,KAGnBa,EAASZ,IAAMS,EAERG,I,6BAIPM,cAAcjB,KAAKC,Y,sCAGLiB,GAEd,IADAA,EAAQC,OAAOD,GACRA,EAAME,OAAS,GACpBF,EAAQ,IAAMA,EAEhB,OAAOA,I,+BAIP,IAAMG,EAAYrB,KAAKL,MACvB,OACE,yBAAK2B,UAAU,aACb,gCAASD,EAAUzB,KAAnB,KACA,8BAA0B,IAAnByB,EAAUzB,KAAa,MAAQ,OAAtC,OACA,gCAASyB,EAAUxB,MAAnB,KACA,oCAA8B,IAApBwB,EAAUxB,MAAc,OAAS,QAA3C,KACA,gCAASwB,EAAUvB,IAAnB,KACA,oCAA4B,IAAlBuB,EAAUvB,IAAY,SAAW,UAA3C,KACA,gCAASuB,EAAUtB,IAAnB,KACA,oCAA4B,IAAlBsB,EAAUtB,IAAY,SAAW,UAA3C,U,GApFgBwB,a,MCeTC,MAZf,WACE,OACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKG,IAAKC,IAAOJ,UAAU,WAAWK,IAAI,SAC1C,oDACA,kBAAC,EAAD,CAAWxB,KAAK,gCCCJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.460308ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_3041.07ea3ff2.JPG\";","import React, { PropTypes, Component } from \"react\";\n\nclass Countdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      days: 0,\n      hours: 0,\n      min: 0,\n      sec: 0\n    };\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      const date = this.calculateCountdown(this.props.date);\n      date ? this.setState(date) : this.stop();\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  calculateCountdown(endDate) {\n    let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n\n    if (diff <= 0) return false;\n\n    const timeLeft = {\n      years: 0,\n      days: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n\n    if (diff >= 365.25 * 86400) {\n      timeLeft.years = Math.floor(diff / (365.25 * 86400));\n      diff -= timeLeft.years * 365.25 * 86400;\n    }\n\n    if (diff >= 86400) {\n      // 24 * 60 * 60\n      timeLeft.days = Math.floor(diff / 86400);\n      diff -= timeLeft.days * 86400;\n    }\n\n    if (diff >= 3600) {\n      // 60 * 60\n      timeLeft.hours = Math.floor(diff / 3600);\n      diff -= timeLeft.hours * 3600;\n    }\n\n    if (diff >= 60) {\n      timeLeft.min = Math.floor(diff / 60);\n      diff -= timeLeft.min * 60;\n    }\n\n    timeLeft.sec = diff;\n\n    return timeLeft;\n  }\n\n  stop() {\n    clearInterval(this.interval);\n  }\n\n  addLeadingZeros(value) {\n    value = String(value);\n    while (value.length < 2) {\n      value = \"0\" + value;\n    }\n    return value;\n  }\n\n  render() {\n    const countDown = this.state;\n    return (\n      <div className=\"countDown\">\n        <strong>{countDown.days} </strong>\n        <span>{countDown.days === 1 ? \"Day\" : \"Days\"} - </span>\n        <strong>{countDown.hours} </strong>\n        <strong> {countDown.hours === 1 ? \"Hour\" : \"Hours\"} </strong>\n        <strong>{countDown.min} </strong>\n        <strong> {countDown.min === 1 ? \"Minute\" : \"Minutes\"} </strong>\n        <strong>{countDown.sec} </strong>\n        <strong> {countDown.sec === 1 ? \"Second\" : \"Seconds\"} </strong>\n      </div>\n    );\n  }\n}\n\n// Countdown.propTypes = {\n//   date: PropTypes.string.isRequired\n// };\n\n// Countdown.defaultProps = {\n//   date: new Date()\n// };\n\nexport default Countdown;\n","import React from \"react\";\nimport image from \"../src/IMG_3041.JPG\";\nimport Countdown from \"../src/components/countdown\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={image} className=\"App-logo\" alt=\"logo\" />\n        <h1>Countdown for Pellie</h1>\n        <Countdown date=\"2019-11-30T12:00:00.889Z\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}